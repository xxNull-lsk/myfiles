//  This file is automatically generated. DO NOT EDIT, all your changes would be lost.
//  https://pub.dartlang.org/packages/iconfont_convert

// ignore_for_file: constant_identifier_names, use_super_parameters

import 'package:flutter/material.dart';

class FileType1 {
  static const String _family = 'icon-filetype1';
  
  FileType1._();
  
  static const IconData ic_sys = IconData(0xe609, fontFamily: _family); // sys
  static const IconData exe = IconData(0xe61e, fontFamily: _family); // exe
  static const IconData txt = IconData(0xe67e, fontFamily: _family); // txt
  static const IconData zip = IconData(0xe638, fontFamily: _family); // zip
  static const IconData ic_7_z = IconData(0xe677, fontFamily: _family); // 7z
  static const IconData ppt = IconData(0xe608, fontFamily: _family); // ppt
  static const IconData xls = IconData(0xe617, fontFamily: _family); // excel
  static const IconData mp_4 = IconData(0xe6bc, fontFamily: _family); // mp4
  static const IconData iso = IconData(0xe60b, fontFamily: _family); // iso
  static const IconData msi = IconData(0xe619, fontFamily: _family); // msi
  static const IconData csv = IconData(0xe64f, fontFamily: _family); // csv
  static const IconData bat = IconData(0xe60d, fontFamily: _family); // bat
  static const IconData folder = IconData(0xe60c, fontFamily: _family); // folder
  static const IconData file = IconData(0xe60f, fontFamily: _family); // file
  static const IconData png = IconData(0xe6c2, fontFamily: _family); // png
  static const IconData html = IconData(0xe787, fontFamily: _family); // html
  static const IconData tar = IconData(0xe636, fontFamily: _family); // tar
  static const IconData pdf = IconData(0xe6a6, fontFamily: _family); // pdf
  static const IconData gz = IconData(0xe722, fontFamily: _family); // gz
  static const IconData doc = IconData(0xe614, fontFamily: _family); // doc
  static const IconData sys = IconData(0xe60e, fontFamily: _family); // sys
  static const IconData chm = IconData(0xe61a, fontFamily: _family); // chm
  static const IconData pptx = IconData(0xe650, fontFamily: _family); // pptx
  static const IconData xlsx = IconData(0xe679, fontFamily: _family); // xlsx
  static const IconData dll = IconData(0xe61b, fontFamily: _family); // dll
  static const IconData gif = IconData(0xe61f, fontFamily: _family); // gif
  static const IconData psd = IconData(0xe627, fontFamily: _family); // psd
  static const IconData cad = IconData(0xe628, fontFamily: _family); // cad
  static const IconData docx = IconData(0xe7b0, fontFamily: _family); // docx
  static const IconData rar = IconData(0xe6ba, fontFamily: _family); // rar
  static const IconData jpg = IconData(0xe62c, fontFamily: _family); // jpg
  static const IconData apk = IconData(0xe641, fontFamily: _family); // apk
  static const IconData mp_3 = IconData(0xe642, fontFamily: _family); // mp3
  static const IconData xz = IconData(0xebfe, fontFamily: _family); // xz
  static const IconData md = IconData(0xebb1, fontFamily: _family); // markdown
}

class _PreviewIcon {
  const _PreviewIcon(this.icon, this.name, this.propName);

  final IconData icon;
  final String name;
  final String propName;
}

class FileType1Preview extends StatelessWidget {
  const FileType1Preview({Key? key}) : super(key: key);

  static const iconList = <_PreviewIcon>[
    _PreviewIcon(FileType1.ic_sys, "ic_sys", "sys"),
    _PreviewIcon(FileType1.exe, "exe", "exe"),
    _PreviewIcon(FileType1.txt, "txt", "txt"),
    _PreviewIcon(FileType1.zip, "zip", "zip"),
    _PreviewIcon(FileType1.ic_7_z, "ic_7_z", "7z"),
    _PreviewIcon(FileType1.ppt, "ppt", "ppt"),
    _PreviewIcon(FileType1.xls, "xls", "excel"),
    _PreviewIcon(FileType1.mp_4, "mp_4", "mp4"),
    _PreviewIcon(FileType1.iso, "iso", "iso"),
    _PreviewIcon(FileType1.msi, "msi", "msi"),
    _PreviewIcon(FileType1.csv, "csv", "csv"),
    _PreviewIcon(FileType1.bat, "bat", "bat"),
    _PreviewIcon(FileType1.folder, "folder", "folder"),
    _PreviewIcon(FileType1.file, "file", "file"),
    _PreviewIcon(FileType1.png, "png", "png"),
    _PreviewIcon(FileType1.html, "html", "html"),
    _PreviewIcon(FileType1.tar, "tar", "tar"),
    _PreviewIcon(FileType1.pdf, "pdf", "pdf"),
    _PreviewIcon(FileType1.gz, "gz", "gz"),
    _PreviewIcon(FileType1.doc, "doc", "doc"),
    _PreviewIcon(FileType1.sys, "sys", "sys"),
    _PreviewIcon(FileType1.chm, "chm", "chm"),
    _PreviewIcon(FileType1.pptx, "pptx", "pptx"),
    _PreviewIcon(FileType1.xlsx, "xlsx", "xlsx"),
    _PreviewIcon(FileType1.dll, "dll", "dll"),
    _PreviewIcon(FileType1.gif, "gif", "gif"),
    _PreviewIcon(FileType1.psd, "psd", "psd"),
    _PreviewIcon(FileType1.cad, "cad", "cad"),
    _PreviewIcon(FileType1.docx, "docx", "docx"),
    _PreviewIcon(FileType1.rar, "rar", "rar"),
    _PreviewIcon(FileType1.jpg, "jpg", "jpg"),
    _PreviewIcon(FileType1.apk, "apk", "apk"),
    _PreviewIcon(FileType1.mp_3, "mp_3", "mp3"),
    _PreviewIcon(FileType1.xz, "xz", "xz"),
    _PreviewIcon(FileType1.md, "md", "markdown"),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('FileType1'),
      ),
      body: GridView.count(
        shrinkWrap: true,
        crossAxisCount: 4,
        children: iconList.map((e) {
          return InkWell(
            onTap: () {
              //
            },
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Container(
                  margin: const EdgeInsets.only(bottom: 8),
                  child: Icon(e.icon),
                ),
                Text(e.name, style: const TextStyle(fontSize: 12), overflow: TextOverflow.ellipsis, maxLines: 1),
                Text(e.propName, style: const TextStyle(fontSize: 12), overflow: TextOverflow.ellipsis, maxLines: 1),
              ],
            ),
          );
        }).toList(),
      ),
    );
  }
}
